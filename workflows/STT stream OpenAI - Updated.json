{
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "youtube_url",
              "name": "url",
              "type": "string",
              "value": "https://www.youtube.com/watch?v=UHHN-mYYQ1g"
            }
          ]
        },
        "options": {}
      },
      "id": "94132ab3-69df-488b-a66c-33a4ffac5167",
      "name": "Enter YouTube URL",
      "position": [
        128,
        32
      ],
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ytdlp:8081/download",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.url }}"
            },
            {
              "name": "format",
              "value": "audio"
            }
          ]
        },
        "options": {
          "timeout": 7200000
        }
      },
      "id": "98a11eec-216a-47cb-883b-b7fc5297046a",
      "name": "Download Audio from YouTube",
      "position": [
        336,
        32
      ],
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "filePath": "={{ $json.path }}"
      },
      "id": "b99847d3-c3a4-48d1-bec4-100539adff85",
      "name": "Read Audio File",
      "position": [
        544,
        32
      ],
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Импортируем необходимые модули\nconst fs = require('fs');\nconst OpenAI = require('openai');\n\nconst apiKey = 'sk-proj-77lKFM*******';\n\n// Создаем клиент OpenAI\nconst openai = new OpenAI({\n  apiKey: apiKey\n});\n\n// Получаем бинарные данные аудио файла\nconst binaryData = items[0].binary.data;\n\nif (!binaryData) {\n  throw new Error('Нет бинарных данных аудио файла');\n}\n\n// Получаем буффер и сохраняем во временный файл\nconst audioBuffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst tempFilePath = `/tmp/audio_${Date.now()}.mp3`;\nfs.writeFileSync(tempFilePath, audioBuffer);\n\ntry {\n  // Создаем стрим для транскрибации с использованием OpenAI SDK\n  const stream = await openai.audio.transcriptions.create({\n    file: fs.createReadStream(tempFilePath),\n    model: 'gpt-4o-mini-transcribe',\n    response_format: 'text',\n    stream: true,\n  });\n\n  // Собираем весь текст из стрима\n  let fullTranscription = '';\n  \n  for await (const event of stream) {\n    console.log('Получен фрагмент транскрибации:', event);\n    if (event.delta) {\n      fullTranscription += event.delta;\n    }\n    \n  }\n\n  // Удаляем временный файл\n  fs.unlinkSync(tempFilePath);\n\n  // Возвращаем результат\n  return [\n    {\n      json: {\n        text: fullTranscription,\n        language: 'auto-detected',\n        duration: 0 // При стриминге duration не возвращается\n      }\n    }\n  ];\n  \n} catch (error) {\n  // Удаляем временный файл в случае ошибки\n  if (fs.existsSync(tempFilePath)) {\n    fs.unlinkSync(tempFilePath);\n  }\n  throw error;\n}"
      },
      "id": "a690ae8b-bfa7-4f47-896a-9c120a8e15c1",
      "name": "Stream Audio Transcription",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        32
      ]
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "=text",
        "options": {
          "fileName": "={{ $('Download Audio from YouTube').item.json.title }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        976,
        32
      ],
      "id": "aca50baf-fc0b-4547-bea0-814165da9a5c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1216,
        32
      ],
      "id": "4099894a-9243-41f8-acde-e9e631536fbe",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -32,
        32
      ],
      "id": "056187d3-4f36-4c7e-a31c-a2f6b813feb7",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "connections": {
    "Enter YouTube URL": {
      "main": [
        [
          {
            "node": "Download Audio from YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio from YouTube": {
      "main": [
        [
          {
            "node": "Read Audio File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Audio File": {
      "main": [
        [
          {
            "node": "Stream Audio Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stream Audio Transcription": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Enter YouTube URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "206adf6655ba61d819856ed7ca9125a8e9b0a533b7fbb1ed0b047dc4ade2df87"
  }
}